<!--地址管理-->
<template>
  <view class="{{currentPage==0?'':'hidden'}}">
    <addressList :list.sync="addressList" :tbuys.sync="tbuys" :ids.sync="ids" @currentPage.user="getCurrentPage"></addressList>
  </view>
  <view class="{{currentPage==1?'':'hidden'}}">
    <addressAdd :addrcur.sync="currentPage"  @currentPage.user="getCurrentPage"></addressAdd>
  </view>
  <view class="{{currentPage==2?'':'hidden'}}">
    <addressEdit :addrcur.sync="currentPage" :addrid.sync="addrid" @currentPage.user="getCurrentPage" ></addressEdit>
  </view>
</template>
<script>
import wepy from 'wepy';
import AddressList from "../components/address_list";
import AddressAdd from "../components/address_add";
import AddressEdit from "../components/address_edit";
import api from "../api/api";
import tip from '@/utils/tip';
import {
  USER_SPECICAL_INFO
} from '@/utils/constant';
export default class Address extends wepy.page {
  config = {
    navigationBarTitleText: '地址管理',
  }
  data = {
    type:false,//为true是从个人中心的地址管理点进来的,false是订单页点进来的
    addressList: [],
    receiverInfo:{},
    addrid:"",
    ids:"",
    tbuys:"cartbuy",
    //显示当前组件 0 列表 1新增 2编辑
    currentPage: 0
  }

  //地址列表的实现
  async getUserAddress() {
    let that = this;
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let open_id = userSpecialInfo.openid;
    let m_id=userSpecialInfo.mid;
    const json = await api.getAddress({
      query: {
        open_id:open_id,
        m_id:m_id
      }
    });
    if (json.data.length > 0) {
      this.addressList=json.data;
      this.$invoke("addressList","refreshList", this.addressList);
    } else {
      tip.error(json.data.msg)
    }
    that.showLoading = false;
  }
  //获取该地址id的数据
  //把数据作为参数传给edit页面fresh方法中
  async receiverInf(id) {
    let that = this;
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let open_id = userSpecialInfo.openid;
    let m_id=userSpecialInfo.mid;
    const json = await api.getAddress({
      query: {
        open_id:open_id,
        m_id:m_id,
      }
    });
    //得到地址id的数据
    if(json.data.length>0){
      for(let i=0;i<json.data.length;i++){
        let str=json.data[i].addres_id.replace(/(^\s*)|(\s*$)/g, "");
        if(str==id){
          this.receiverInfo=json.data[i];
          this.$apply();
          break;
        }
      }
      //调用addressEdit组件方法
      this.$invoke("addressEdit","refresh", this.receiverInfo);
    }else {
      tip.error(json.data.msg)
    }
    that.showLoading = false;
  }

  components = {
    addressList: AddressList,
    addressAdd: AddressAdd,
    addressEdit: AddressEdit
  }

  onLoad(option) {
    this.currentPage = option.addrcur;
    this.type = option.type;
    this.tbuys=option.tbuys;
    this.addrid=option.addrid;
    this.ids=option.ids;
    if(option.addrcur=="2"){
      this.receiverInf(option.addrid);
      this.addrid='';
    }
    this.getUserAddress();
    this.$invoke("addressList","setOrgType", this.type);
    this.$apply();

  }

  onShow(){
    let that = this;
    this.getUserAddress();
  }
  computed = {

  }
  methods = {
    getCurrentPage(cur,id) {
      this.currentPage = cur;
      if (cur!=1&&cur!=0) {
        this.receiverInf(id);
      }
    }
  }
  onUnload() {
  }
  events = {
      refreshAddList(msg){
          this.getUserAddress();
      }
  }
}

</script>
<style lang="less">
.hidden {
  display: none;
}

</style>
